openapi: 3.1.0
info:
  title: Sample API
  description: A sample API to demonstrate all possible fields in OpenAPI 3.1
  termsOfService: https://example.com/terms/
  contact:
    name: API Support
    url: https://example.com/support
    email: support@example.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  - url: https://api.example.com/v1
    description: Production server
    variables:
      basePath:
        default: /v1
        description: Base path for the API
  - url: https://staging.api.example.com/{basePath}
    description: Staging server
    variables:
      basePath:
        default: /v1
        enum:
          - /v1
          - /v2
        description: Base path for the API
tags:
  - name: users
    description: Operations related to users
    externalDocs:
      description: Find more info here
      url: https://example.com/users
externalDocs:
  description: More documentation
  url: https://example.com/docs
jsonSchemaDialect: https://json-schema.org/draft/2020-12/schema
security:
  - apiKey: []
  - oauth2: []
components:
  schemas:
    User:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        email:
          type: string
          format: email
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
    Error:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
  responses:
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized access
      headers:
        WWW-Authenticate:
          schema:
            type: string
  parameters:
    userId:
      name: userId
      in: path
      description: ID of the user
      required: true
      schema:
        type: integer
        format: int64
    page:
      name: page
      in: query
      description: Page number
      required: false
      schema:
        type: integer
        default: 1
  examples:
    UserExample:
      value:
        id: 1
        name: John Doe
        email: john.doe@example.com
        isActive: true
        createdAt: '2023-01-01T00:00:00Z'
  requestBodies:
    CreateUser:
      description: User data to create a new user
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
  headers:
    X-RateLimit-Limit:
      description: The number of allowed requests in the current period
      schema:
        type: integer
  securitySchemes:
    apiKey:
      type: apiKey
      name: X-API-Key
      in: header
    oauth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://example.com/oauth/authorize
          tokenUrl: https://example.com/oauth/token
          scopes:
            read: Grants read access
            write: Grants write access
paths:
  /users:
    get:
      tags:
        - users
      summary: List all users
      operationId: listUsers
      parameters:
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: A JSON array of user objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
      security:
        - apiKey: []
    post:
      tags:
        - users
      summary: Create a new user
      operationId: createUser
      requestBody:
        $ref: '#/components/requestBodies/CreateUser'
      responses:
        '201':
          description: User created successfully
          headers:
            Location:
              description: The URL of the created user
              schema:
                type: string
                format: uri
        '400':
          $ref: '#/components/responses/NotFound'
      callbacks:
        userCreated:
          '{$request.body#/callbackUrl}':
            post:
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/User'
              responses:
                '200':
                  description: Callback received
  '/users/{userId}':
    get:
      tags:
        - users
      summary: Get a user by ID
      operationId: getUserById
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          description: A user object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFound'
      deprecated: false
    put:
      tags:
        - users
      summary: Update a user by ID
      operationId: updateUserById
      parameters:
        - $ref: '#/components/parameters/userId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated successfully
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - users
      summary: Delete a user by ID
      operationId: deleteUserById
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        '204':
          description: User deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'
webhooks:
  userSignup:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Webhook received